import SPELLS from 'common/SPELLS';
import Spell from 'common/SPELLS/Spell';
import TALENTS from 'common/TALENTS/priest';
import { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';
import Events, {
  AbilityEvent,
  CastEvent,
  EndChannelEvent,
  RemoveBuffEvent,
  ResourceChangeEvent,
  UpdateSpellUsableEvent,
} from 'parser/core/Events';
import Abilities from 'parser/core/modules/Abilities';
import SPELL_CATEGORY from 'parser/core/SPELL_CATEGORY';
import ExecuteHelper from 'parser/shared/modules/helpers/ExecuteHelper';
import BoringSpellValueText from 'parser/ui/BoringSpellValueText';
import ItemDamageDone from 'parser/ui/ItemDamageDone';
import ItemInsanityGained from 'analysis/retail/priest/shadow/interface/ItemInsanityGained';
import Statistic from 'parser/ui/Statistic';
import STATISTIC_CATEGORY from 'parser/ui/STATISTIC_CATEGORY';
import STATISTIC_ORDER from 'parser/ui/STATISTIC_ORDER';
import CastEfficiency from 'parser/shared/modules/CastEfficiency';
import { BoxRowEntry, PerformanceBoxRow } from 'interface/guide/components/PerformanceBoxRow';
import { QualitativePerformance } from 'parser/ui/QualitativePerformance';
import { explanationAndDataSubsection } from 'interface/guide/components/ExplanationRow';
import { SpellLink } from 'interface';

class VoidBlast extends ExecuteHelper {
  static executeSources = SELECTED_PLAYER;
  static lowerThreshold = -1;
  static executeOutsideRangeEnablers: Spell[] = [
    SPELLS.SHADOW_PRIEST_VOIDWEAVER_ENTROPIC_RIFT_BUFF,
  ];
  static modifiesDamage = false;
  static executeSpells: Spell[] = [SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST];
  static countCooldownAsExecuteTime = true;

  static dependencies = {
    ...ExecuteHelper.dependencies,
    abilities: Abilities,
    castEfficiency: CastEfficiency,
  };

  maxCasts = 0; //set Max Casts for Void Blast
  castVB = 0; //casts of Voidblast
  missVB = 0; //missed possible casts of Void Blast
  lostCharges = 0; //previous events charges of Void Blast

  timeWasted = 0; //the time at max charges during this rift.
  riftStartTime = 0; //the timestamp of the end of Void Torrent,
  riftFirstCast = false; //if this will be the first VoidBlast event of VB this rift will be a cast.
  riftEndTime = 0; //the timestamp of rift end
  recentMax = 0; //Last time we were at max charges
  atMaxCharges = false; //If we are at max charges of Void Blast

  insanityVB = 0; //amount of insanity generated by Void Blast.
  VBCharges: BoxRowEntry[] = [];

  protected abilities!: Abilities;
  protected castEfficiency!: CastEfficiency;

  constructor(options: Options) {
    super(options);
    this.active = this.selectedCombatant.hasTalent(TALENTS.VOID_BLAST_TALENT);

    this.addEventListener(
      Events.UpdateSpellUsable.by(SELECTED_PLAYER).spell(
        SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST,
      ),
      this.onVBUpdate,
    );

    this.addEventListener(
      Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST),
      this.onVBCast,
    );

    this.addEventListener(
      Events.resourcechange.by(SELECTED_PLAYER).spell(SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST),
      this.onVBInsanity,
    );

    this.addEventListener(
      Events.EndChannel.by(SELECTED_PLAYER).spell(TALENTS.VOID_TORRENT_TALENT),
      this.startRift,
    );

    this.addEventListener(
      Events.removebuff
        .by(SELECTED_PLAYER)
        .spell(SPELLS.SHADOW_PRIEST_VOIDWEAVER_ENTROPIC_RIFT_BUFF),
      this.endRift,
    );

    this.addEventListener(Events.fightend, this.adjustMaxCasts);

    const ctor = this.constructor as typeof ExecuteHelper;
    ctor.executeSpells.push(SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST);

    (options.abilities as Abilities).add({
      spell: SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST.id,
      category: SPELL_CATEGORY.ROTATIONAL,
      cooldown: (haste: number) => 9 / (1 + haste),
      gcd: {
        base: 1500,
      },
      charges: 1 + (this.selectedCombatant.hasTalent(TALENTS.THOUGHT_HARVESTER_TALENT) ? 1 : 0),
      castEfficiency: {
        suggestion: true,
        recommendedEfficiency: 0.95,
        maxCasts: () => this.maxCasts,
      },
    });
  }

  //This sets the Partial Charges of SPELL 1 to be the same as SPELL 2, for VoidBlast and MindBlast
  //We need to do this because Mind Blast and Void Blast are different spells, but their CD is the same.
  //This assumes that SPELL1 is at 2 charges.
  //I thought this would be used for more, so I made it flexible, but its only used in a specific case.
  setPartialCharges(event: AbilityEvent<any>, Spell1: number, Spell2: number) {
    if (this.spellUsable.chargesAvailable(Spell2) === 0) {
      this.spellUsable.beginCooldown(event, Spell1);
      this.spellUsable.beginCooldown(event, Spell1);
      const CD =
        this.spellUsable.fullCooldownDuration(Spell2) - this.spellUsable.cooldownRemaining(Spell2);
      this.spellUsable.reduceCooldown(Spell1, CD);
    }
    if (this.spellUsable.chargesAvailable(Spell2) === 1) {
      this.spellUsable.beginCooldown(event, Spell1);
      const CD =
        this.spellUsable.fullCooldownDuration(Spell2) - this.spellUsable.cooldownRemaining(Spell2);
      this.spellUsable.reduceCooldown(Spell1, CD);
    }
    //if Spell 2 is at 2 charges, nothing is required, since Spell1 is at 2 charges when this is called.
  }

  startRift(event: EndChannelEvent) {
    //the Rift is created at the start of VT channel, however its duration is not expended until the end of the channel
    //we don't want to count time while channeling VT, as it should be channeled as long as possible.
    //So we treat the end of this channel as the start of the rift, for purpose of checking possible casts of VoidBlast
    this.timeWasted = 0; //Reset wasted time for this rift.
    this.lostCharges = 0;
    this.atMaxCharges = false;
    this.riftStartTime = event.timestamp;

    //The charges and remaining cooldown on Void Blast should be exactly equal to the remaning cooldown on mindblast at this time
    this.setPartialCharges(
      event,
      SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST.id,
      SPELLS.MIND_BLAST.id,
    );

    //If we are at 2 charges at the start of the rift, if we delay in casting, it is wasted time.
    //we do it this way so no time is be double counted.
    if (this.spellUsable.chargesAvailable(SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST.id) === 2) {
      this.riftFirstCast = true;
    }

    //For the guide view, we want to check that at the end of void torrent's channel, we are close to 2 charges of void blast.
    const charges = this.spellUsable.fractionalChargesAvailable(
      SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST.id,
    );
    const tooltip = (
      <>
        @<strong>{this.owner.formatTimestamp(event.timestamp)}</strong>, Charges:
        <strong>{charges.toFixed(2)}</strong>
      </>
    );
    let value = QualitativePerformance.Good;
    if (charges <= 1.5) {
      value = QualitativePerformance.Ok;
    }
    if (charges <= 1.0) {
      value = QualitativePerformance.Fail;
    }
    this.VBCharges.push({ value, tooltip });
  }

  endRift(event: RemoveBuffEvent) {
    this.riftEndTime = event.timestamp;
    this.calculateMissedVB();
  }

  onVBUpdate(event: UpdateSpellUsableEvent) {
    //The Time between the end of Void Torrent (the start of the rift) and the first event of VB is wasted time if we are at 2 charges.
    if (this.riftFirstCast) {
      this.timeWasted += event.timestamp - this.riftStartTime;
      this.riftFirstCast = false;
    }

    //If we have charges at the end of the rift, then we should have cast them.
    //The current charges will be added as lostCharges when the rift ends.
    this.lostCharges = event.chargesAvailable;

    //Check if we were at max charges, and if so tell how much time until we are not.
    if (event.isOnCooldown && this.atMaxCharges) {
      //this is the timestamp when we stop being at max charges
      this.atMaxCharges = false;
      this.timeWasted += event.timestamp - this.recentMax;
      //console.log("endmaxcharge", this.owner.formatTimestamp(event.timestamp))
    }

    if (!event.isOnCooldown) {
      //this is the timestamp when we start being at max charges.
      this.atMaxCharges = true;
      this.recentMax = event.timestamp;
      //console.log("start max charge", this.owner.formatTimestamp(event.timestamp))
    }
  }

  onVBCast(event: CastEvent) {
    this.castVB += 1;

    //everytime VB is cast, MB also goes on cooldown.
    this.spellUsable.beginCooldown(event, SPELLS.MIND_BLAST.id);
    //console.log("chargesVB Cast",this.spellUsable.fractionalChargesAvailable(SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST.id));
    //console.log("chargesMB Cast",this.spellUsable.fractionalChargesAvailable(SPELLS.MIND_BLAST.id));
  }

  onVBInsanity(event: ResourceChangeEvent) {
    this.insanityVB += event.resourceChange;
  }

  calculateMissedVB() {
    //Any charges we gain during Rift we should spend.
    //Any time at max charges is potentially an additional charge that we didn't gain.

    //If we end the Rift at max charges, the time since we hit max charges is added to wasted time.
    if (this.atMaxCharges) {
      this.timeWasted += this.riftEndTime - this.recentMax;
    }
    const cooldown =
      this.abilities.getAbility(SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST.id)!.cooldown * 1000;
    const wastedCD = Math.floor(this.timeWasted / cooldown);

    //missed casts are = charges left at end + time not on cooldown/CD
    const missedCasts = this.lostCharges + wastedCD;

    this.missVB += missedCasts;

    //console.log("TOTAL MISSED DURING THIS RIFT", missedCasts,"=", this.lostCharges,"+", wastedCD)
    //console.log("CASTS TOTAL SO FAR", this.castVB,"/",this.missVB)
  }

  adjustMaxCasts() {
    this.maxCasts = this.castVB + this.missVB;

    const mindBlast = this.abilities.getAbility(SPELLS.MIND_BLAST.id);
    //We want to reduce the number of possible Mind Blast Casts by the Max amount of Void Blast Casts.
    if (mindBlast) {
      const mindBlastEfficiencyMaxCasts =
        this.castEfficiency.getCastEfficiencyForAbility(mindBlast)?.maxCasts;
      if (mindBlastEfficiencyMaxCasts) {
        mindBlast.castEfficiency.maxCasts = () => mindBlastEfficiencyMaxCasts - this.maxCasts;
      }
    }
  }

  get guideSubsection(): JSX.Element {
    const explanation = (
      <p>
        <b>
          <SpellLink spell={TALENTS.VOID_BLAST_TALENT} />
        </b>{' '}
        replaces <SpellLink spell={SPELLS.MIND_BLAST} /> with Void Blast, a significantly more
        powerful spell for the duration of the <SpellLink spell={TALENTS.ENTROPIC_RIFT_TALENT} />.
        <br />
        It is important to cast <SpellLink spell={SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST} /> as
        much as possible while it is available. To do so, you should save charges of Mind Blast
        before casting <SpellLink spell={TALENTS.VOID_TORRENT_TALENT} /> in order to have charges of
        Void Blast at the end of Void Torrent's channel. <br />
      </p>
    );

    const data = (
      <div>
        <strong>Void Blast Charges</strong>
        <br />
        <PerformanceBoxRow values={this.VBCharges} />
      </div>
    );
    return explanationAndDataSubsection(explanation, data, 50);
  }

  statistic() {
    return (
      <Statistic
        position={STATISTIC_ORDER.OPTIONAL(13)}
        size="flexible"
        category={STATISTIC_CATEGORY.HERO_TALENTS}
      >
        <BoringSpellValueText spell={SPELLS.SHADOW_PRIEST_VOIDWEAVER_VOID_BLAST}>
          <ItemDamageDone amount={this.damage} />
          <div>
            <ItemInsanityGained amount={this.insanityVB} />
          </div>
        </BoringSpellValueText>
      </Statistic>
    );
  }
}

export default VoidBlast;
